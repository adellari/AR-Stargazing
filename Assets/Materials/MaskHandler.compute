
#pragma kernel JFA_Init
#pragma kernel JFA_Crawl
#pragma kernel JFA_DistanceField
#pragma kernel Bilinear_Sample


RWTexture2D<float4> Result;
float2 TexSize;
int maxCrawl;
int offset;



float2 TexSize2;
Texture2D Texture;
float4x4 _displayMatrix;
SamplerState TexLinearClampSampler;

float4 Lerp(float4 a, float4 b, float t)
{
    return a * (1 - t) + b * t;
}

float2 mulDisplay(float2 uv)
{
    float3 res = mul(_displayMatrix, float4(uv,  1., 1.)).xyz;
    return res.xy/res.z;
}

float _confidenceThreshold;
[numthreads(8, 8, 1)]
void Bilinear_Sample(uint3 id : SV_DispatchThreadID) 
{
    const float2 uv = mulDisplay(float2(id.xy / TexSize));
    const float2 texelSize2 = 1 / TexSize2;

    //dispatched at the resolution of the resulting texture
    //step 1: use uvs instead of pixels for congruency across texture sizes

    float2 pixel = float2(id.xy) + 0.5;
    float2 fract = frac(pixel);
    
    float2 halfTexel = texelSize2 / 2;
    //double check that texSize doesnt need to be flipped since our display matrix transposes the image
    
    float4 tl = Texture.SampleLevel(TexLinearClampSampler, uv - halfTexel, 0);
    float4 tr = Texture.SampleLevel(TexLinearClampSampler, uv + float2(halfTexel.x, -halfTexel.y), 0);
    float4 bl = Texture.SampleLevel(TexLinearClampSampler, uv + float2(-halfTexel.x, halfTexel.y), 0);
    float4 br = Texture.SampleLevel(TexLinearClampSampler, uv + halfTexel, 0);

    float4 top = Lerp(tl, tr, fract.x);
    float4 bot = Lerp(bl, br, fract.x);

    float4 res = Lerp(top, bot, fract.y);
    res = step(_confidenceThreshold, res.r) * res;
    Result[id.xy] = res;
}

[numthreads(8, 8, 1)]
void JFA_Init(uint3 id : SV_DispatchThreadID)
{
    float2 uv = float2(id.xy / TexSize);
    Result[id.xy] = float4(uv, 0, 1) * step(0.01, Texture.SampleLevel(TexLinearClampSampler, uv, 0).r);
    
}

[numthreads(8, 8, 1)]
void JFA_Crawl(uint3 id : SV_DispatchThreadID)
{
    const float2 uv = float2(id.xy / TexSize);
    const float2 texelSize = 1 / TexSize;

    //create indices to crawl
    const uint2 pixels[9] =
        {
        uint2(id.x - offset, id.y - offset),
        uint2(id.x, id.y - offset), uint2(id.x + offset, id.y - offset),
        uint2(id.x - offset, id.y), uint2(id.x, id.y), uint2(id.x, id.y + offset),
        uint2(id.x - offset, id.y + offset), uint2(id.x, id.y + offset), uint2(id.x + offset, id.y + offset)
        };
    
    int _id = -1;
    float _max = 1000000000;
    
    for (int a =0; a<9; a++)
    {
        //pixel we're evaluating
        const uint2 pix = pixels[a];
        //the uv stored in pixel
        float2 val = Result[pix].xy;    
        //make sure the uv is nonzero
        if (length(val) == 0)
            continue;
        //calculate the distance between us and the uv of stored pixel
        float _dist = distance(uv, val);
        //shortest distance evaluation
        if (_dist < _max)
        {
            _max = _dist;
            _id = a;
        }
    }
    
    if (_id < 0)
        return;
    float2 closest = Result[pixels[_id]].xy;
    Result[id.xy] = float4(closest, 0, 1);
    //Result[uint2(id.x, offset * 20)] = float4(1, 0, 0, 1);
    //Result[id.xy] = Result[id.xy];
}

float _jfaSmoothing;
float _jfaExp;
[numthreads(8, 8, 1)]
void JFA_DistanceField(uint3 id : SV_DispatchThreadID)
{
    const float2 uv = float2(id.xy / TexSize);
    const float2 texelSize = 1 / TexSize;
    
    float2 pix = Texture.SampleLevel(TexLinearClampSampler, uv, 0).xy;
    
    //our pixel is too far out of the crawl range 
    if (length(pix) == 0)
        return;
        //Result[id.xy] = float4(0, 0, 0, 0);
    //else
    //{
        float dist = 1 / (distance(uv, pix) / texelSize.x * _jfaSmoothing);
        //Result[id.xy] = float4(Result[id.xy].xyz, 1 - exp(-_jfaExp*dist));
        Result[id.xy] = float4(Result[id.xy].xyz, smoothstep(0, _jfaExp, dist));
    //}
    
}




